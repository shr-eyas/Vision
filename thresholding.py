''' 
The objective of this project is to implement and analyze a threshold selection
algorithm based on rough entropy. The algorithm is designed to handle uncertai-
nty in gray-scale images, improving segmentation performance by identifying an 
optimal threshold value for object-background separation.
''' 

import cv2  # type: ignore
import numpy as np

def thresholdSelection(image, m, n):
    # Maximum and minimum grayscale values in the entire image
    minGray = int(image.min())
    maxGray = int(image.max())

    # Size of the arrays based on the grayscale range
    size = maxGray - minGray + 1
    objectL = np.zeros(size, dtype=int)
    objectU = np.zeros(size, dtype=int)
    backgroundL = np.zeros(size, dtype=int)
    backgroundU = np.zeros(size, dtype=int)

    # List of granules generated by slicing 'image' into 'm x n' granules
    granules = [
        image[i:i + m, j:j + n]
        for i in range(0, image.shape[0], m)
        for j in range(0, image.shape[1], n)
    ]

    # Step 1: Process each granule
    for granule in granules:
        # Maximum and minimum grayscale values in the current granule (subregion)
        maxGranule = int(granule.max())
        minGranule = int(granule.min())

        # Update object and background arrays based on maxGranule and minGranule
        for j in range(maxGranule, maxGray + 1):
            objectL[j - minGray] += 1
        for j in range(minGranule, maxGray + 1):
            objectU[j - minGray] += 1
        for j in range(minGray, minGranule + 1):
            backgroundL[j - minGray] += 1
        for j in range(minGray, maxGranule + 1):
            backgroundU[j - minGray] += 1

    # Step 2: Calculate rough entropy for each possible threshold
    roughEntropy = np.zeros(size)
    for l in range(minGray, maxGray + 1):
        idx = l - minGray
        objectRoughness = 1 - (objectL[idx] / objectU[idx] if objectU[idx] != 0 else 1)
        backgroundRoughness = 1 - (backgroundL[idx] / backgroundU[idx] if backgroundU[idx] != 0 else 1)

        # Calculate rough entropy only if both roughness values are greater than 0
        if objectRoughness > 0 and backgroundRoughness > 0:
            roughEntropy[idx] = -0.5 * (
                objectRoughness * np.log(objectRoughness) +
                backgroundRoughness * np.log(backgroundRoughness)
            )

    # Step 3: Find the optimal threshold with maximum rough entropy
    optimalThreshold = minGray + np.argmax(roughEntropy)
    return optimalThreshold

# Load a grayscale image
image = cv2.imread('images/plant.png', cv2.IMREAD_GRAYSCALE)

m, n = 5, 5

threshold = thresholdSelection(image, m, n)
print("Optimal Threshold:", threshold)
